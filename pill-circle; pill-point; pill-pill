--[[
Full info:
Check: https://math.stackexchange.com/questions/2248617/shortest-distance-between-a-point-and-a-line-segment
If you don't have pico8 then all you are interested in is the pill_collision function being called with tables p,p1,p2.

The wiki and other articles when u look at them provide formula for lines, not line-segments.
Pill collision is basically a cylinder shape plastered into 2d. It's 2 circles connected by a linesegment between their centers. 
The center of these 2 circles constitute p1 and p2 in this example. I refer to p1 and p2 as the endsegments, forming the linesegment p1p2.
They contain a radius value as well, usually a shared value and you can swap one for the other in this ex. If you wanted each end of the pills to have
different radii, you would have to make sure the proper value is inserted when checking 1 endpoint vs another. And if the closest point was on the line segment:
let's say r=2----r=4, well if t=0.5 then ur radius to use in the calculation is r=3. 
The other parameter is the center of the circle that you are checking to see if it collides with the pill object.
This circle can have radius of 0, making it also work for pill-point collision.

There are 3 steps here:
1. Define a linesegment madeup of 2 points i.e. p1 and p2 tables below; Define a point/circle-center to check for collisions with i.e. p
2. Figureout the shorest distance between the centerpoint p and the linesegment p1p2.
3. Use standard circle collision with this distance i.e. if dist<r1+r2....we have a collision
*Remember in normal circle collision: You check if the distance between the centers of two circles is less than the sum of both circles radii.

Process:
Pretend the linesegment p1p2 is an infinite line stretching past its endsegments p1 and p2. Draw an imaginary line 
intersecting and perpendicular to this infinite line that also passes through the point p. Check the link above for pictures. 
local t will test if this perpendicular line actually intercepts a point in the original linesegment p1p2 contained between endsegments p1 and p2. 
If it does (t is between 0 and 1) then we calculate the length of that perpendicular line
and check it against the sum of the radii like in normal circle collision. Why? Cause a perpendicular line between a point and a linesegment is by 
definition the shortest distance.

If t was not between 0 and 1 we know there is no such perpendicular line to the point p...Cause the closest point is not found along the linesegment
..and the imaginary line can't be perpendicular if its not on the original linesegment p1p2.
Infact it means the closest point is one of the endpoints of this linesegment.
So all we need to do at this point is find the closest endpoint to p.
We calculate the hypotenus from p to each endsegment p1/p2 and choose the smallest one as our shortest distance.
We do our distance<r+r formula again and that gives us the answer as to whether there is a collision or not, cause it will return true if it does.
In the example below the hypotenus is squared to rid of the squareroot sign. Meaning the sum of the radii is also squared.
i.e. Instead of doing sqrt(dist)<r1+r2 we do (dist)<(r1+r2)*(r1+r2)

The code below is setup for pill-pill collision. Basically the process is a more repeated form of the above.
a---b c----d
a to cd; b to cd; c to ab, d to ab

i.e. in my code we have
p_1---p_2   p1----p2
p_1 to p1p2; p_2 to p1p2; p1 to p_1p_2; p2 to p_1p_2

So we are basically doing the pill-circ collision test 4 times. And along the way we have to grab the smallest values inbetween certain steps. 
I'm using tables for this, cause otherwise I have to assign inbetween variables and it gets messey.
The code for pill-pill i.e. double_pill_collision() isn't optimized, it can be cleaned up some more. You can remove the ?/prints and the call from _draw()

]]

--player
p_1={x=84,y=54,r=5} --if doing pill-circle/pt collision just use this as p in pill_collision, ignore p_2 i.e. pill_collision(p_1,p1,p2) 
p_2={x=124,y=54,r=5}
--pill/cylinder
p1={x=64,y=30,r=15}
p2={x=64,y=60,r=15} collide=false
function pill_collision(p,p1,p2)--p={x=,y=}; point/circ vs pill
	--p to p1p2
	local t=-((p1.x-p.x)*(p2.x-p1.x)+(p1.y-p.y)*(p2.y-p1.y))/((p2.x-p1.x)^2+(p2.y-p1.y)^2)
	--if closest pt perp to lineseg
	if t>=0 and t<=1 then return abs(((p2.x-p1.x)*(p1.y-p.y)-(p1.x-p.x)*(p2.y-p1.y)))/sqrt((p2.x-p1.x)^2+(p2.y-p1.y)^2)<p1.r+p.r end
	--otherwise its nearest endpt
	local d1=(p1.x-p.x)^2+(p1.y-p.y)^2
	local d2=(p2.x-p.x)^2+(p2.y-p.y)^2
	if d1<d2 then return d1<(p1.r+p.r)*(p1.r+p.r) else return d2<(p1.r+p.r)*(p1.r+p.r) end
end
function double_pill_collision(p_1,p_2,p1,p2)--pill vs pill
	local a={}
	--p_1 to p1p2
	 local t1=-((p1.x-p_1.x)*(p2.x-p1.x)+(p1.y-p_1.y)*(p2.y-p1.y))/((p2.x-p1.x)^2+(p2.y-p1.y)^2)
	 if t1>=0 and t1<=1 then
		 a[1]=abs(((p2.x-p1.x)*(p1.y-p_1.y)-(p1.x-p_1.x)*(p2.y-p1.y)))/sqrt((p2.x-p1.x)^2+(p2.y-p1.y)^2)
	else a[1]=100 end
	--p_2 to p1p2
	 local t2=-((p1.x-p_2.x)*(p2.x-p1.x)+(p1.y-p_2.y)*(p2.y-p1.y))/((p2.x-p1.x)^2+(p2.y-p1.y)^2)
	 if t2>=0 and t2<=1 then
	 a[2]=abs(((p2.x-p1.x)*(p1.y-p_2.y)-(p1.x-p_2.x)*(p2.y-p1.y)))/sqrt((p2.x-p1.x)^2+(p2.y-p1.y)^2)
	else a[2]=100 end
	--p1 to p_1p_2
	 local t3=-((p_1.x-p1.x)*(p_2.x-p_1.x)+(p_1.y-p1.y)*(p_2.y-p_1.y))/((p_2.x-p_1.x)^2+(p_2.y-p_1.y)^2)
	 if t3>=0 and t3<=1 then
	 a[3]=abs(((p_2.x-p_1.x)*(p_1.y-p1.y)-(p_1.x-p1.x)*(p_2.y-p_1.y)))/sqrt((p_2.x-p_1.x)^2+(p_2.y-p_1.y)^2)
	else a[3]=100 end
	--p2 to p_1p_2
	 local t4=-((p_1.x-p2.x)*(p_2.x-p_1.x)+(p_1.y-p2.y)*(p_2.y-p_1.y))/((p_2.x-p_1.x)^2+(p_2.y-p_1.y)^2)
	 if t4>=0 and t4<=1 then
	 a[4]=abs(((p_2.x-p_1.x)*(p_1.y-p2.y)-(p_1.x-p2.x)*(p_2.y-p_1.y)))/sqrt((p_2.x-p_1.x)^2+(p_2.y-p_1.y)^2)
	else a[4]=100 end
	current=a[1]
	for i=2,#a do
		if current>a[i] then
			current=a[i]
		end
	end
	?"current"..current
	if current~=100 and current>=0 then
		return current<p_1.r+p1.r 
	else--must check nearest endpoint incase both circles overlapping
		--p_1 and p1
		local b={}
		b[1]=(p1.x-p_1.x)^2+(p1.y-p_1.y)^2
		--p_1 and p2
		b[2]=(p2.x-p_1.x)^2+(p2.y-p_1.y)^2
		--p_2 and p1
		b[3]=(p1.x-p_2.x)^2+(p1.y-p_2.y)^2
		--p_2 and p2
		b[4]=(p2.x-p_2.x)^2+(p2.y-p_2.y)^2
		current=b[1]
		?b[1]
		?b[2]
		?b[3]
		?b[4]
		for i=2,#b do
			if current>b[i] then
				current=b[i]
			end
		end
		?"currenttt"..current
		if current>=0 then return current<(p1.r+p_1.r)*(p1.r+p_1.r) end
	end
end
function _update()
	if btn(0) then p_1.x-=1 p_2.x-=1 end
	if btn(1) then p_1.x+=1 p_2.x+=1 end
	if btn(2) then p_1.y-=1 p_2.y-=1 end
	if btn(3) then p_1.y+=1 p_2.y+=1 end
	if double_pill_collision(p_1,p_2,p1,p2) then collide=true else collide=false end
end
function _draw()
	cls(1)
	double_pill_collision(p_1,p_2,p1,p2) --to print debug info, remove otherwise and use the call in _update()
	line(p1.x,p1.y,p2.x,p2.y,15)
	line(p1.x+p1.r,p1.y,p2.x+p1.r,p2.y,15)
	line(p1.x-p1.r,p1.y,p2.x-p1.r,p2.y,15)
	pset(p1.x,p1.y,4)
	pset(p2.x,p2.y,6)
	pset(p_1.x,p_1.y,10)
--player
	circ(p_1.x,p_1.y,p_1.r,11)
	circ(p_2.x,p_2.y,p_2.r,10)
	line(p_1.x,p_1.y,p_2.x,p_2.y,15)
	line(p_1.x,p_1.y+p_1.r,p_2.x,p_2.y+p_1.r,15)
	line(p_1.x,p_1.y-p_1.r,p_2.x,p_2.y-p_1.r,15)

	circ(p1.x,p1.y,p1.r,9)
	circ(p2.x,p2.y,p2.r,9)
	?collide,84,64,8
--?abs(((p2.x-p1.x)*(p1.y-p.y)-(p1.x-p.x)*(p2.y-p1.y)))/sqrt((p2.x-p1.x)^2+(p2.y-p1.y)^2)
end
